name: Deploy gh-pages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # 定时执行，字段含义：分钟 小时 日 月 星期
  # 注意：
  # 1.采用的是 UTC 时间
  #   即，你配置的 0 0 * * *（UTC）00:00 实际上是（GMT+0800）08:00
  #   只有你配置为 00 16 * * *（UTC）16:00 实际上才是 GMT+0800）00:00
  # 2.官方声明：schedule 事件在 GitHub Actions 工作流运行期间负载过高时可能会延迟。 高负载时间包括每小时的开始时间。 为了降低延迟的可能性，建议将您的工作流程安排在不同时间运行。
  #   例如：笔者之前设定的定时规则为 0 0 * * *（UTC），实际（GMT+0800）执行时间通常在 9:10 ~ 10:00，甚至会出现在 10:00 之后执行的情况
  # 3.建议不只是定时执行的时候注意时间，自己 push 时也注意时间，早点休息
  #   例如：笔者多次亲身经历，凌晨时间 pages build and deployment 任务大概能持续 8 分钟的 Current status: deployment_queued 状态，
  #   即使能进入 Current status: deployment_in_progress 和 Current status: syncing_files 状态，如果文件多点，没一会儿就 Error: Timeout reached, aborting! 超时失败了
  schedule:
    - cron: 30 17 * * *
  # 可手动执行
  workflow_dispatch:
jobs:
  # 任务1：部署GitHub Pages
  deploy-github-pages:
    runs-on: ubuntu-latest
    steps:
      # 1.检出源码
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # 这个为使用 JamesIves/github-pages-deploy-action脚本所需要的配置
          persist-credentials: false
          # 默认只拉取分支最近一次的 commit，可能会导致一些文章的 GitInfo 变量无法获取，设为 0 代表拉取所有分支所有提交
          fetch-depth: 0
      # 2.安装PNPM
      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: latest
      # 3.安装NODE环境
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          registry-url: https://registry.npmjs.org
          cache: pnpm
      # 4.安装依赖
      - name: Install Dependencies
        run: pnpm i --frozen-lockfile
      # 5.打包
      - name: Build
        # env:
        #   TZ: Asia/Shanghai
        run: pnpm build
      # 6.部署
      - name: Deploy GitHub Pages
        # env:
        #   TZ: Asia/Shanghai
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          # token: ${{ secrets.ACCESS_TOKEN }}
          branch: gh-pages
          folder: ./.vitepress/dist
      # - name: SCP deploy vipsunwei.com
      #   env:
      #     TZ: Asia/Shanghai
      #   uses: nogsantos/ssh-scp-deploy@v1.2.1
      #   with:
      #     src: dist/*
      #     host: ${{ secrets.SSH_HOST }}
      #     remote: ${{ secrets.SSH_DIR }}
      #     port: ${{ secrets.SSH_PORT }}
      #     user: ${{ secrets.SSH_USER }}
      #     key: ${{ secrets.SSH_KEY }}
