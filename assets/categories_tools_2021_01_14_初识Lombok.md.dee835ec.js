import{_ as t}from"./chunks/ArticleMetadata.dd4bf5dc.js";import{_ as c,c as r,g as y,w as i,b as l,f as F,a as A,i as C,o as p,e as D,j as B}from"./app.960cb299.js";const d="/assets/202101140900566.a47e8d0c.jpg",E="/assets/202101140900568.8726f150.png",h="/assets/202101140900569.3ad2bd46.png",u="/assets/202101140900570.c172ba88.png",g="/assets/202101140900571.51b17333.png",m="/assets/202101140900572.b71db2b6.png",b="/assets/202101140900573.68337cdc.png",f="/assets/202101140900575.5584a85b.png",v="/assets/202101140900577.3902777b.png",k="/assets/202101140900579.9ae37f40.png",_="/assets/202101140900581.8e43a8a5.png",S="/assets/202101140900583.54b0833c.png",q="/assets/202101140900585.f05e5284.png",P="/assets/202101140900587.8b0fe9c9.png",I="/assets/202101140900589.68575aad.png",j="/assets/202101140900591.99845807.png",x="/assets/202101140900593.eda6bddb.png",L="/assets/202101140900595.260ec0e4.png",J="/assets/202101140900597.54f9c3ef.png",U=JSON.parse('{"title":"初识 Lombok","description":"","frontmatter":{"title":"初识 Lombok","author":"查尔斯","date":"2021/01/14 09:05","categories":["工具四海谈"],"tags":["Java","Lombok"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"IDEA插件安装","slug":"idea插件安装","link":"#idea插件安装","children":[]},{"level":3,"title":"引入依赖","slug":"引入依赖","link":"#引入依赖","children":[]}]},{"level":2,"title":"常用注解","slug":"常用注解","link":"#常用注解","children":[{"level":3,"title":"@NonNull","slug":"nonnull","link":"#nonnull","children":[]},{"level":3,"title":"@Getter/@Setter","slug":"getter-setter","link":"#getter-setter","children":[]},{"level":3,"title":"@ToString","slug":"tostring","link":"#tostring","children":[]},{"level":3,"title":"构造类注解","slug":"构造类注解","link":"#构造类注解","children":[]},{"level":3,"title":"@Data","slug":"data","link":"#data","children":[]},{"level":3,"title":"@Cleanup","slug":"cleanup","link":"#cleanup","children":[]},{"level":3,"title":"@Synchronized","slug":"synchronized","link":"#synchronized","children":[]},{"level":3,"title":"@Builder","slug":"builder","link":"#builder","children":[]},{"level":3,"title":"日志类注解","slug":"日志类注解","link":"#日志类注解","children":[]}]},{"level":2,"title":"Java 14 新特性 Records","slug":"java-14-新特性-records","link":"#java-14-新特性-records","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]},{"level":2,"title":"后记","slug":"后记","link":"#后记","children":[]}],"relativePath":"categories/tools/2021/01/14/初识Lombok.md","lastUpdated":1677831742000}'),N={name:"categories/tools/2021/01/14/初识Lombok.md"},w=l("h1",{id:"初识-lombok",tabindex:"-1"},[F("初识 Lombok "),l("a",{class:"header-anchor",href:"#初识-lombok","aria-hidden":"true"},"#")],-1),T=A(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p><strong>C：</strong> 在 Java 开发中，为了符合 <code>封装</code> 这一面向对象特性，在构建 JavaBean 时往往要加上 <code>getter/setter</code> 方法。</p><p>在封装的概念里，<code>getter</code> 和 <code>setter</code> 方法是我们提供给外界的统一访问入口，我们可以在其中添加合理的逻辑控制语句，来处理一些业务或解决一些不合理的赋值，非常好的特性！</p><p>但现代开发的实际使用中，我们编写的 JavaBean 的 <code>getter/setter</code> 方法体都是空的，显得非常冗余，但又不能去除。对此，我们在每次使用时，只能通过反复的心理暗示（IDE 自动生成快捷键、生成不费事儿）来麻痹自己。</p><p>Eclipse 中是 <code>Alt + Shift+S &gt; R</code>，IntelliJ IDEA 中是 <code>[FN] + Alt+Insert &gt; Getter and Setter</code>。</p><p>笔者相信，这些快捷键大家都很熟悉，甚至不只是它们，一般我们还会用上无参构造、带参构造、重写 <code>toString</code>、重写 <code>equals</code> 、<code>hashCode</code> 等生成快捷键，每次创建 JavaBean，写完属性之后就是一通 &quot;火花带闪电&quot; 快速生成，就像下面的代码一样。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 宠物类</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@author</span><span style="color:#676E95;font-style:italic;"> Charles7c</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @date 2020-01-14</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Pet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 属性声明</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /** 宠物名 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /** 健康值 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// getter/setter 方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setName</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getHealth</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setHealth</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">health</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">health </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">o</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(this</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">o </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">())</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Pet</span><span style="color:#A6ACCD;"> pet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Pet</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> o</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> health </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> pet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">health </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">equals</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pet</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hashCode</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> Objects</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hash</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Pet{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name=&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, health=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> health </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 宠物类</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@author</span><span style="color:#7F848E;font-style:italic;"> Charles7c</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @date 2020-01-14</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">// 属性声明</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** 宠物名 */</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** 健康值 */</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> health</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">// getter/setter 方法</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> getName</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> setName</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> getHealth</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> health;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> setHealth</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">health</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">health</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> health;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">boolean</span><span style="color:#61AFEF;"> equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">Object</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">o</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> o) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">if</span><span style="color:#ABB2BF;"> (o </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">null</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">||</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">() </span><span style="color:#56B6C2;">!=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">o</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getClass</span><span style="color:#ABB2BF;">()) </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#D19A66;">false</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">Pet</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">pet</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> (Pet) o;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> health </span><span style="color:#56B6C2;">==</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">pet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">health</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">&amp;&amp;</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">equals</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">pet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">int</span><span style="color:#61AFEF;"> hashCode</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Objects</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">hash</span><span style="color:#ABB2BF;">(name, health);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Override</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Pet{&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;name=&#39;&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> name </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&#39;</span><span style="color:#56B6C2;">\\&#39;</span><span style="color:#98C379;">&#39;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&quot;, health=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> health </span><span style="color:#56B6C2;">+</span></span>
<span class="line"><span style="color:#ABB2BF;">                </span><span style="color:#98C379;">&#39;}&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span><span style="color:#E06C75;">	</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>毫无疑问，天下苦之久矣，于是 Lombok 出现了，旨在通过用简单的语法和注解（Annoation）代替众多的冗余代码，接下来我们就好好认识认识它。</p><p><img src="`+d+`" alt="202101140900566"></p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title"><a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a> 简介</p><p>Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</p><p>Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more. [1]</p></div><p>上方是 Lombok 官方的简介，看不懂的同学也没关系，笔者按它实际的体验简单给你介绍下。</p><p>Lombok 是一个 Java 库，这个库提供了很多注解，这些注解会在代码编译的时候，帮助我们自动生成 <code>getter</code> 、<code>setter</code>、<code>equals</code>、<code>hashCode</code> 等等方法，这样我们就可以摆脱曾经的苦恼了。</p><p>使用上它之后，你甚至会觉得在使用一个基于 Java 构建的新编程语言，下面就是 Lombok 优化上述 Pet 类的冗余代码后的效果。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * 宠物类</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * </span><span style="color:#F78C6C;font-style:italic;">@author</span><span style="color:#676E95;font-style:italic;"> Charles7c</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * @date 2020-01-14</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Data</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Pet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 属性声明</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /** 宠物名 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /** 健康值 */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * 宠物类</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * </span><span style="color:#C678DD;font-style:italic;">@author</span><span style="color:#7F848E;font-style:italic;"> Charles7c</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> * @date 2020-01-14</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"> */</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Data</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">// 属性声明</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** 宠物名 */</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">    /** 健康值 */</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> health</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>一个 <code>@Data</code> 注解直接可以替代掉那些冗余方法们。怎么样，还不错吧。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-hidden="true">#</a></h2><h3 id="idea插件安装" tabindex="-1">IDEA插件安装 <a class="header-anchor" href="#idea插件安装" aria-hidden="true">#</a></h3><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>截止笔者发文时， IntelliJ IDEA 的 2020.3 版本已经发布了，这一版开始，已经预装了 Lombok 插件，意味着你如果用的这版及之后，可以不用看这一小节了。</p></div><p>因为 Lombok 是在项目编译时，根据我们使用的注解，生成我们不想写的冗余代码。 但是 IDE 们可不认识它这一套 &quot;骚操作&quot;，你在 JavaBean 中没写对应的 <code>getter/setter</code> 等方法，那么在 IDE 中写代码时想使用对应 JavaBean 的这些方法就是 &quot;天方夜谭&quot;。</p><p>也就是说如果你在类中没写 <code>getter/setter</code> ，那在 IDE 中编写类时，哪怕已经标注了<code>@Data</code>，也无法让 IDE 提示及使用它们。</p><p>想要在 IDE 中正常使用 Lombok，必须先在 IDE 中安装对应的 Lombok 插件。Lombok 为主流的 IDE 提供了插件支持，我们本次就以 IntelliJ IDEA 为例，来安装下插件，并测试使用效果。</p><p><img src="`+E+'" alt="202101140900568"></p><p>其实 Lombok 官网对各种 IDE 如何安装插件是有教程的（<a href="https://projectlombok.org/setup/intellij" target="_blank" rel="noreferrer">IDEA的教程</a>）。笔者个人认为写得已经很详细了，那接下来笔者就带大家实际操作一遍，你来实现的话记得按我的步骤来。</p><p>首先打开 IDEA，在菜单 <code>File</code> 中找到 <code>Settings</code> 子菜单。</p><p><img src="'+h+'" alt="202101140900569"></p><p>在弹出的对话框中，选择 <code>Plugins</code>，然后在 <code>Marketplace</code> 插件市场中输入 <code>lombok</code> 回车搜索，搜索到了点击<code>Install</code> 安装就可以了。</p><p><img src="'+u+'" alt="202101140900570"></p><p>安装成功后，直接点击 <code>Restart IDE</code> 重启 IDEA，插件就安装成功了。</p><p><img src="'+g+`" alt="202101140900571"></p><h3 id="引入依赖" tabindex="-1">引入依赖 <a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a></h3><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>如果你使用了 Spring Boot，Lombok 的版本已经被 Spring Boot 锁定了，意味着你可以不用指定版本，只需要引入 Lombok 依赖即可。</p></div><p>安装好插件后，就可以在你的项目中引入 Lombok 依赖来使用了。</p><p>Maven 依赖如下：</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.projectlombok</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">lombok</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">1.18.24</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">&lt;</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;org.projectlombok&lt;/</span><span style="color:#E06C75;">groupId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;lombok&lt;/</span><span style="color:#E06C75;">artifactId</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    &lt;</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;1.18.24&lt;/</span><span style="color:#E06C75;">version</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">dependency</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>Gradle 依赖如下：</p><div class="language-groovy"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">compile </span><span style="color:#FFCB6B;">group</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">org.projectlombok</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">lombok</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">version</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1.18.24</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">compile </span><span style="color:#D19A66;">group</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;org.projectlombok&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;lombok&#39;</span><span style="color:#ABB2BF;">, </span><span style="color:#D19A66;">version</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;1.18.24&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="常用注解" tabindex="-1">常用注解 <a class="header-anchor" href="#常用注解" aria-hidden="true">#</a></h2><p>Lombok 的学习使用，就是要学习它的注解们。但的确很多，笔者要是全来一遍，时间花费可不少而且意义不大，所以我们挑一些常见常用的来介绍演示一下就可以了。</p><p>对这些注解的使用，笔者奉行基本应用即可，特殊的类，麻烦的属性，不建议采用，以免&quot;上头&quot;。如果你到时候真的需要，自行搜索一下 <a href="https://projectlombok.org/features/all" target="_blank" rel="noreferrer">官网文档</a> 即可。</p><h3 id="nonnull" tabindex="-1">@NonNull <a class="header-anchor" href="#nonnull" aria-hidden="true">#</a></h3><p>我们在设值时，经常要进行非空判断，因为为空后再进行处理可能会引发业务错误，<code>@NonNull</code> 注解可以帮助我们简化此类代码。</p><p>它可以用在属性或方法形参上，如果标注的属性/参数为空，则抛出 <code>NPE(NullPointerException)</code>。</p><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>下图中，左侧是我使用 Lombok 的代码，右侧是 <code>mvn compile</code> 之后，从 <code>target</code> 文件夹中查看的反编译后的代码（这些多出来的代码，都是 Lombok 在编译时自动生成的），后续示例笔者不再解释这一点。</p></div><p><img src="`+m+'" alt="202101140900572"></p><h3 id="getter-setter" tabindex="-1">@Getter/@Setter <a class="header-anchor" href="#getter-setter" aria-hidden="true">#</a></h3><p><code>@Getter</code> 和 <code>@Setter</code> 这两个注解，顾名思义就是为我们生成对应的 <code>getter/setter</code> 方法的，一般情况下直接在类上声明就可以了，这样类中所有的非静态私有属性都会生成 <code>public</code> 修饰的 <code>getter/setter</code> 方法了。</p><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>生成的 <code>getter</code> 遵循布尔属性的约定，例如：<code>boolean</code> 类型的 <code>deleted</code> 生成的 <code>getter</code> 方法为 <code>isDeleted</code> 而不是 <code>getDeleted</code>。</p></div><p><img src="'+b+'" alt="202101140900573"></p><p>当然，如果你只是想为部分属性生成对应的 <code>getter/setter</code> 方法，就在属性左侧或上方添加注解即可，它们默认生成的方法都是 <code>public</code> 修饰的。如果你想调整访问级别，可以通过注解内的属性值来进行设置。</p><p><img src="'+f+'" alt="202101140900575"></p><p><code>@Getter</code> 和 <code>@Setter</code> 的确挺好用的，笔者个人比较喜欢使用，诚意推荐。</p><p>还有同学可能担心，如果有一天需要自己在 <code>getter/setter</code> 方法中添加逻辑控制怎么办？不用担心，你直接正常写对应的方法即可，因为 Lombok 检测到你写了之后就不会生成了（这点 &quot;眼力见儿&quot; 还是有的）。</p><h3 id="tostring" tabindex="-1">@ToString <a class="header-anchor" href="#tostring" aria-hidden="true">#</a></h3><p><code>@ToString</code> 就是帮助我们生成非静态属性的 <code>toString</code> 方法的一个注解，它的使用也很简单，一般情况下都是直接在类上面添加即可。</p><p>有些时候我们在 <code>toString</code> 方法中，不想出现某个属性，可以直接在该属性上标注<code>@ToString.Exclude</code> 或采用 <code>@ToString(exclude={&quot;属性名&quot;,....)</code> 来排除。</p><p><img src="'+v+'" alt="202101140900577"></p><p>还有，如果你不想 <code>toString</code> 方法输出属性名，那么 <code>includeFieldNames=false</code> 适合你。</p><p><img src="'+k+'" alt="202101140900579"></p><p>另外如果一个子类想要在 <code>toString</code> 中也输出父类的 <code>toString</code> 内容，那么在 <code>@ToString</code> 内添加 <code>callSuper</code> 属性为 <code>true</code> 即可，但注意父类必须也重写 <code>toString</code>，否则肯定是使用 <code>Object</code> 类默认的 <code>toString</code> 方法返回值了。</p><p><img src="'+_+'" alt="202101140900581"></p><h3 id="构造类注解" tabindex="-1">构造类注解 <a class="header-anchor" href="#构造类注解" aria-hidden="true">#</a></h3><p>构造方法也是我们经常要生成的代码了，Lombok 提供了三个注解来满足你的各种构造需求。</p><ul><li><code>@NoArgsConstructor</code> 可以自动生成无参数构造方法</li><li><code>@AllArgsConstructor</code> 可以按顺序自动生成所有参数的构造方法</li><li><code>@RequiredArgsConstructor</code> 仅为标注了 <code>@NonNull</code> 注解的属性生成构造方法</li></ul><p>我举一个 <code>@AllArgsConstructor</code> 注解的例子。</p><p><img src="'+S+'" alt="202101140900583"></p><h3 id="data" tabindex="-1">@Data <a class="header-anchor" href="#data" aria-hidden="true">#</a></h3><p>在上方 Lombok 概述的示例中，我们就看到了 <code>@Data</code> 这个注解，大多数人都喜欢使用此注解。但笔者认为，如果你没有特别需求，仅仅要生成 <code>getter/setter</code> 方法，那使用 <code>@Getter</code> 和 <code>@Setter</code> 就可以了。</p><p>看看下方的示例吧，我仅仅写了一个干干净净的 Pet 类，但是在使用时，它却提示出很多的方法，像 <code>setter</code>、<code>getter</code>、<code>equals</code> 等都提供出来了，显然是 Lombok 的 &quot;锅&quot;，它等价于 <code>@ToString</code>、 <code>@EqualsAndHashCode</code>, <code>@Getter</code>、<code>@Setter</code>、<code>@RequiredArgsConstructor</code> 等注解的集合。</p><p><img src="'+q+`" alt="202101140900585"></p><h3 id="cleanup" tabindex="-1">@Cleanup <a class="header-anchor" href="#cleanup" aria-hidden="true">#</a></h3><p>我们在使用 IO 系 API 时，需要自行进行资源管理（关流），<code>Java 7</code> 中上线了 <code>try-with-resources</code> 语法来帮助我们实现自动关流，现在 Lombok 也来 &quot;抢活&quot; 了。它提供了一个注解来帮助你自动生成资源管理代码，孰优孰劣自行选择吧。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Java 7的try-with-resources</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InputStream</span><span style="color:#A6ACCD;"> in </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">FileInputStream</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">d:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">a.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ....</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// Java 7的try-with-resources</span></span>
<span class="line"><span style="color:#C678DD;">try</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">InputStream</span><span style="color:#E06C75;"> in </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">FileInputStream</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;d:</span><span style="color:#56B6C2;">\\\\</span><span style="color:#98C379;">a.txt&quot;</span><span style="color:#E06C75;">)){</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">// ....</span></span>
<span class="line"><span style="color:#E06C75;">}</span><span style="color:#C678DD;">catch</span><span style="color:#E06C75;"> (</span><span style="color:#E5C07B;">Exception</span><span style="color:#E06C75;"> </span><span style="color:#E06C75;font-style:italic;">e</span><span style="color:#E06C75;">){</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#E5C07B;">e</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">printStackTrace</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">}</span></span>
<span class="line"></span></code></pre></div><p><code>@Cleanup</code> 注解使用后及其反编译代码如下。</p><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>因为 Lombok 编译生成的代码涉及到 <code>close()</code> 方法调用，所以需要提前抛出一个 IOException，否则编译会失败。</p></div><p><img src="`+P+'" alt="202101140900587"></p><h3 id="synchronized" tabindex="-1">@Synchronized <a class="header-anchor" href="#synchronized" aria-hidden="true">#</a></h3><p>为了解决多线程不安全的问题，我们经常使用 <code>synchronized</code> 关键字来进行加锁，可以加在方法上也可以使用代码块来加锁。</p><p><code>@Synchronized</code> 注解的效果和 <code>synchronized</code> 关键字一样，它可以用在类方法或者实例方法上，是<code>synchronized</code> 关键字更安全的变体。</p><p>区别在于锁对象不同，对于类方法和实例方法，<code>synchronized</code> 关键字的锁对象分别是类的 <code>class</code> 对象和 <code>this</code> 对象，而 <code>@Synchronized</code> 的锁对象则分别是私有静态 final 对象 <code>$LOCK</code> 和私有 final 对象 <code>$lock</code>。当然，也可以自己指定锁对象。</p><p><img src="'+I+`" alt="202101140900589"></p><h3 id="builder" tabindex="-1">@Builder <a class="header-anchor" href="#builder" aria-hidden="true">#</a></h3><p><code>@Builder</code> 用在类上，是类似于构建者模式的一个注解。它的作用就是帮你生成一套 <code>builder APIs</code>，将对象构建过程和细节进行封装，更简单和优雅的实现对象的创建及赋值。我们看个对象创建的对比例子吧。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 不使用 @Builder 注解 常见的创建对象方式</span></span>
<span class="line"><span style="color:#C792EA;">Pet</span><span style="color:#A6ACCD;"> pet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Pet</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setName</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">小白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHealth</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用@Builder注解后 创建对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在IDEA中，你直接一路敲下来就可以了 链式编程简直不要太舒服</span></span>
<span class="line"><span style="color:#C792EA;">Pet</span><span style="color:#A6ACCD;"> pet1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">builder</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">小白</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">health</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// 不使用 @Builder 注解 常见的创建对象方式</span></span>
<span class="line"><span style="color:#E5C07B;">Pet</span><span style="color:#E06C75;"> pet </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">Pet</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E5C07B;">pet</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setName</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小白&quot;</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#E5C07B;">pet</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">setHealth</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// ......</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 使用@Builder注解后 创建对象</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 在IDEA中，你直接一路敲下来就可以了 链式编程简直不要太舒服</span></span>
<span class="line"><span style="color:#E5C07B;">Pet</span><span style="color:#E06C75;"> pet1 </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">builder</span><span style="color:#ABB2BF;">()</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">name</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;小白&quot;</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">health</span><span style="color:#ABB2BF;">(</span><span style="color:#D19A66;">100</span><span style="color:#ABB2BF;">)</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">build</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span></code></pre></div><p>那么 <code>@Builder</code> 注解实际帮助我们添加了什么代码呢？看看反编译后的内容吧。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Pet</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 1.一个构造</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">Pet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">health</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">health </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 2.一个静态构建方法  返回构建类对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Pet</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">PetBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">builder</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> Pet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">PetBuilder</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 3.一个静态内部构建类</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PetBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">PetBuilder</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 4.属性同名赋值方法  </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 【调用完还会返回构建对象，这样可以继续调用其他方法】</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Pet</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">PetBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">name</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Pet</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">PetBuilder</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">health</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">health</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">health </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 5.最终构建对象方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Pet</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Pet</span><span style="color:#89DDFF;">(this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">health</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 6.一个toString</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Pet.PetBuilder(name=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, health=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">health </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> health</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">// 1.一个构造</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#61AFEF;">Pet</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">health</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">health</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> health;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">// 2.一个静态构建方法  返回构建类对象</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">PetBuilder</span><span style="color:#61AFEF;"> builder</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> Pet.</span><span style="color:#61AFEF;">PetBuilder</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#7F848E;font-style:italic;">// 3.一个静态内部构建类</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">PetBuilder</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> health</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#61AFEF;">PetBuilder</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#7F848E;font-style:italic;">// 4.属性同名赋值方法  </span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#7F848E;font-style:italic;">// 【调用完还会返回构建对象，这样可以继续调用其他方法】</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">PetBuilder</span><span style="color:#61AFEF;"> name</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">name</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> name;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">PetBuilder</span><span style="color:#61AFEF;"> health</span><span style="color:#ABB2BF;">(</span><span style="color:#C678DD;">int</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;font-style:italic;">health</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">health</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> health;</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#7F848E;font-style:italic;">// 5.最终构建对象方法</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#61AFEF;"> build</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#C678DD;">new</span><span style="color:#ABB2BF;"> </span><span style="color:#61AFEF;">Pet</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">health</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#7F848E;font-style:italic;">// 6.一个toString</span></span>
<span class="line"><span style="color:#E06C75;">        </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">String</span><span style="color:#61AFEF;"> toString</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">            </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;Pet.PetBuilder(name=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">name</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;, health=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">this</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">health</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#98C379;">&quot;)&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">        }</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#ABB2BF;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="日志类注解" tabindex="-1">日志类注解 <a class="header-anchor" href="#日志类注解" aria-hidden="true">#</a></h3><p>在开发中，我们常常要使用 log 来记录程序执行过程，Lombok 为我们提供了6种注解，根据不同的注解将生成不同类型的 log 实例，但是实例名称都是 <code>log</code>。</p><ul><li><code>@CommonsLog</code></li><li><code>@Log</code></li><li><code>@Log4j</code></li><li><code>@Log4j2</code></li><li><strong><code>@Slf4j(推荐)</code></strong></li><li><code>@XSlf4j</code></li></ul><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Slf4j</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Controller</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">GetMapping</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Result</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">findAll</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 直接使用 log 实例</span></span>
<span class="line"><span style="color:#A6ACCD;">        log</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">info</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">用户列表查询</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Slf4j</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">Controller</span></span>
<span class="line"><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">RequestMapping</span><span style="color:#E06C75;">(</span><span style="color:#98C379;">&quot;/user&quot;</span><span style="color:#E06C75;">)</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">UserController</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#ABB2BF;">@</span><span style="color:#E5C07B;">GetMapping</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Result</span><span style="color:#61AFEF;"> findAll</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#7F848E;font-style:italic;">// 直接使用 log 实例</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">log</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">info</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;用户列表查询&quot;</span><span style="color:#ABB2BF;">);    </span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">笔者说</p><p>SLF4J（Simple Logging Facade For Java，为 Java 提供的简单日志门面）。在阿里巴巴 Java 开发手册日志规约中强调，如果要使用日志 API ，必须使用日志门面 API 而不是具体日志框架的 API。</p><p><img src="`+j+'" alt="202101140900591"></p><p>所谓日志门面，其实就是类似于 Java 的 JDBC 一样的一套 API ，有了 JDBC，你无需关心未来切换成哪种关系型数据库，因为获取连接等方法用的是 JDBC 的 API 。</p><p>同样日志门面，可以让我们无需关心未来切换哪种日志框架，因为获取日志实例用的是日志门面的 API。</p></div><h2 id="java-14-新特性-records" tabindex="-1">Java 14 新特性 Records <a class="header-anchor" href="#java-14-新特性-records" aria-hidden="true">#</a></h2><p>2020年3月17日，Java 14 正式 <code>GA</code>，虽然我们目前仍然主要使用 Java 8，但更新肯定是趋势，未来升级到 14 或更高的某个版本只是时间问题，所以这些新特性我们还是应该关注关注的。</p><p>在 Java 14 中有一个预览特性 <code>Records</code>，Java 15 对该特性又进行了二次预览，<code>Records</code> 提供了一种紧凑的语法来声明类（我们经常用来做类声明的方式有 <code>class</code>、<code>enum</code> 等，这回又多一个），以帮助开发者写出更简洁的代码。</p><p>该特性主要用在特定领域的类，这些类主要用于保存数据，不提供领域行为。再通俗的讲就是我们可以给一些简单的，一般不提供业务操作的类（<code>POJO类</code>等）更改下声明类的方法了。更多详情请查看：<a href="https://openjdk.java.net/jeps/359" target="_blank" rel="noreferrer">Records的官方介绍</a></p><p><img src="'+x+`" alt="202101140900593"></p><p>来个简单的语法示例吧？看看下面的代码，它也自动解决了头疼的 <code>getter</code>、<code>setter</code>、<code>equals</code>、<code>hashCode</code>、无参构造等。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#676E95;font-style:italic;">// record 声明类语法</span></span>
<span class="line"><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">ClassModifier</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> record TypeIdentifier [TypeParameters] </span></span>
<span class="line"><span style="color:#A6ACCD;">    (RecordComponents) [SuperInterfaces] [RecordBody]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 示例代码：注意这是类，不是方法</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">record</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Pet</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> health</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic;">// record 声明类语法</span></span>
<span class="line"><span style="color:#E06C75;">{ClassModifier} record TypeIdentifier [TypeParameters] </span></span>
<span class="line"><span style="color:#E06C75;">    (RecordComponents) [SuperInterfaces] [RecordBody]</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">// 示例代码：注意这是类，不是方法</span></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">record</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Pet</span><span style="color:#E06C75;">(</span><span style="color:#E5C07B;">String</span><span style="color:#E06C75;"> name</span><span style="color:#ABB2BF;">,</span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> health)</span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-hidden="true">#</a></h2><p>[1]Project Lombok 简介：<a href="https://projectlombok.org" target="_blank" rel="noreferrer">https://projectlombok.org</a></p><p>[2]Lombok常用注解：<a href="https://www.cnblogs.com/mayhh/p/10113169.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/mayhh/p/10113169.html</a></p><p>[3]Records介绍：<a href="https://openjdk.java.net/jeps/359" target="_blank" rel="noreferrer">https://openjdk.java.net/jeps/359</a></p><h2 id="后记" tabindex="-1">后记 <a class="header-anchor" href="#后记" aria-hidden="true">#</a></h2><p>Lombok 入门到这里也就介绍完了，感觉怎么样？这只是个入门示例，如果想再多研究研究其他注解和属性，那需要更多的篇幅和时间。</p><p>实际上，在现在的业内，Lombok 的使用存在着争议，有些人认为它是 <code>开发利器</code>，有些人 <code>避之不及</code>。认为它好的是因为它的确减少了大量的冗余代码，相当于写代码随时带个生成器，阅读代码也变得更加清晰直观；认为它不好的是因为它的使用还需要安装额外的插件，且是侵入性的设计（有些人认为，它这种改变语法的事应该是语言本身自己该做的，它 &quot;越俎代庖&quot; 了），如果开发中 IDEA、JDK、Lombok 不配套，那结果显而易见；还有些人认为它影响了业务控制代码的添加和阅读。</p><p>孰是孰非，仁者见仁智者见智。笔者个人觉得，自己平时练习和测试都可以随便用用，如果上升到公司，还是应该以实际和团队整体出发。</p><p><img src="`+L+'" alt="202101140900595"></p><p><img src="'+J+'" alt="202101140900597"></p><div class="info custom-block"><p class="custom-block-title">笔者说</p><p>对于技术的学习，笔者一贯遵循的步骤是：先用最最简单的 demo 让它跑起来，然后学学它的最最常用 API 和 配置让自己能用起来，最后熟练使用的基础上，在空闲时尝试阅读它的源码让自己能够洞彻它的运行机制，部分问题出现的原因，同时借鉴这些技术实现来提升自己的代码高度。</p><p>所以在笔者的文章中，前期基本都是小白文，仅仅穿插很少量的源码研究。当然等小白文更新多了，你们还依然喜欢，后期会不定时专门对部分技术的源码进行解析。</p></div>',109);function O(s,R,z,G,M,$){const o=t,e=C("ClientOnly");return p(),r("div",null,[w,y(e,null,{default:i(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(p(),D(o,{key:0,article:s.$frontmatter},null,8,["article"])):B("",!0)]}),_:1}),T])}const K=c(N,[["render",O]]);export{U as __pageData,K as default};
