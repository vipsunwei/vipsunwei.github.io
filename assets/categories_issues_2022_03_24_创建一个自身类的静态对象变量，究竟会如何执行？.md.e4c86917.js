import{_ as e}from"./chunks/ArticleMetadata.dd4bf5dc.js";import{_ as c,c as r,g as y,w as C,b as l,f as i,a as D,i as A,o as p,e as F,j as E}from"./app.960cb299.js";const x=JSON.parse('{"title":"创建一个自身类的静态对象变量，究竟会如何执行？","description":"","frontmatter":{"title":"创建一个自身类的静态对象变量，究竟会如何执行？","author":"查尔斯","date":"2022/03/24 21:30","categories":["Bug万象集"],"tags":["Java","JVM"]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"简单分析","slug":"简单分析","link":"#简单分析","children":[]},{"level":2,"title":"深度分析","slug":"深度分析","link":"#深度分析","children":[]},{"level":2,"title":"额外扩展","slug":"额外扩展","link":"#额外扩展","children":[]}],"relativePath":"categories/issues/2022/03/24/创建一个自身类的静态对象变量，究竟会如何执行？.md","lastUpdated":1677831742000}'),B={name:"categories/issues/2022/03/24/创建一个自身类的静态对象变量，究竟会如何执行？.md"},u=l("h1",{id:"创建一个自身类的静态对象变量-究竟会如何执行",tabindex:"-1"},[i("创建一个自身类的静态对象变量，究竟会如何执行？ "),l("a",{class:"header-anchor",href:"#创建一个自身类的静态对象变量-究竟会如何执行","aria-hidden":"true"},"#")],-1),g=D(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-hidden="true">#</a></h2><p><strong>C：</strong> 近两周在疯狂给项目组面试招聘，昨天晚上10点多，产品总监在面试群里发了一道题，问运行结果是什么，题目如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight has-highlighted-lines vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton</span><span style="color:#A6ACCD;"> singleton </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton</span><span style="color:#89DDFF;">();</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count1</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        count1</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count2</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> singleton</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Singleton</span><span style="color:#A6ACCD;"> singleTon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Singleton</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">count1=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> singleTon</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">count2=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> singleTon</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro has-highlighted-lines vp-code-light" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#E06C75;"> singleton </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">Singleton</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count2 </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> Singleton</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        count1++;</span></span>
<span class="line"><span style="color:#ABB2BF;">        count2++;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#61AFEF;"> getInstance</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> singleton;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">singleTon</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count1=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">singleTon</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count2=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">singleTon</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>这激起了我们几个干技术的热情，那就分析一下吧。</p><h2 id="简单分析" tabindex="-1">简单分析 <a class="header-anchor" href="#简单分析" aria-hidden="true">#</a></h2><p>1、简单看了下题目，这不是一个采用了饿汉式单例模式的单例类嘛，接下来当然是去找程序入口了。</p><p>2、在 Test 类的 main 方法中，首先调用了 Singleton 类的 getInstance() 方法，很显然这是要获取 Singleton 这个单例类的唯一对象（实例）了。</p><p>3、然后在获取到唯一对象（实例）之后，输出了 Singleton 类的两个静态成员变量 count1、count2 的值。（虽然通过对象名调用静态信息这种方式不推荐，但是对结果没有影响）</p><p>4、看到这儿，两个类里也没别的地方有输出语句，所以最终运行结果就是要看看 count1、count2 的输出值了。</p><p>5、<strong>重点来了：</strong> 在调用 getInstance() 方法前，由于 Singleton 类没有加载，所以肯定要先加载类，由于 count1、count2、Singleton 的唯一对象（实例）都是静态的，所以它们会随着类的加载而加载。其中 int 类型的 count1 变量没有指定初始值，那默认值就是 0，count2 指定了初始值是 3， Singleton 类的唯一对象（实例）要创建会调用构造方法，构造方法里又对 count1 和 count2 进行了自增 1 的运算，那结果自然就是 count1 是 1，count2 是 4。</p><p>这么一顿火花带闪电的分析后，自信的将答案发到了群里。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">count1=1</span></span>
<span class="line"><span style="color:#A6ACCD;">count2=4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">count1=1</span></span>
<span class="line"><span style="color:#abb2bf;">count2=4</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><h2 id="深度分析" tabindex="-1">深度分析 <a class="header-anchor" href="#深度分析" aria-hidden="true">#</a></h2><p>很显然答错了，不然也不会单独记录了。之所以答错了，是因为忽略了静态信息的加载顺序，静态信息的加载顺序是由编码顺序决定的，上方分析中先入为主的把 count1 和 count2 加载完了，但实际上最先执行的是 Singleton 的唯一对象（实例）创建及变量赋值，随后才是执行 count1、count2。</p><p>我们可以通过 <code>javap -c Singleton.class</code> 反汇编一下字节码文件，反汇编后的 JVM 指令如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C792EA;">Compiled</span><span style="color:#A6ACCD;"> from </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test.java</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">org</span><span style="color:#A6ACCD;">.example.Singleton </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">example</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 获取 singleton 静态对象变量，并将其值压入栈顶</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> get</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;">     #</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Field singleton:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 从当前方法返回 singleton 对象引用</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> areturn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 1、创建 Singleton 类的对象，并赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 1.1 创建对象</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;">           #5                  </span><span style="color:#676E95;font-style:italic;">// class org/example/Singleton</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 1.2 复制栈顶数值并将复制值压入栈顶</span></span>
<span class="line"><span style="color:#A6ACCD;">       3</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> dup                        </span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 1.3 调用 Singleton 类构造方法，count1 和 count2 自增 1，此时 count1 为 1，count2 为 1</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokespecial #</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 1.4 对象创建成功将对象引用赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">7</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> put</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;">     #</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Field singleTon:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 2、将 3 赋值给 count2</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 2.1 将 int 型 3 推送至栈顶</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iconst_3                         </span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 2.2 为 count2 静态变量赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> put</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;">     #</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Field count2:I</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 3、结束方法</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">14</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;">                            </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Compiled</span><span style="color:#E06C75;"> from </span><span style="color:#98C379;">&quot;Test.java&quot;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">org</span><span style="color:#E06C75;">.example.Singleton </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">org</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">example</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Singleton</span><span style="color:#61AFEF;"> getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    Code</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 获取 singleton 静态对象变量，并将其值压入栈顶</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> get</span><span style="color:#C678DD;">static</span><span style="color:#E06C75;">     #</span><span style="color:#D19A66;">4</span><span style="color:#E06C75;">                  </span><span style="color:#7F848E;font-style:italic;">// Field singleton:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 从当前方法返回 singleton 对象引用</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">3</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> areturn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> {}</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    Code</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 1、创建 Singleton 类的对象，并赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 1.1 创建对象</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;">           #5                  </span><span style="color:#7F848E;font-style:italic;">// class org/example/Singleton</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 1.2 复制栈顶数值并将复制值压入栈顶</span></span>
<span class="line"><span style="color:#E06C75;">       3</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> dup                        </span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 1.3 调用 Singleton 类构造方法，count1 和 count2 自增 1，此时 count1 为 1，count2 为 1</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">4</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> invokespecial #</span><span style="color:#D19A66;">6</span><span style="color:#E06C75;">                  </span><span style="color:#7F848E;font-style:italic;">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 1.4 对象创建成功将对象引用赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">7</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> put</span><span style="color:#C678DD;">static</span><span style="color:#E06C75;">     #</span><span style="color:#D19A66;">4</span><span style="color:#E06C75;">                  </span><span style="color:#7F848E;font-style:italic;">// Field singleTon:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#E06C75;">      </span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#7F848E;font-style:italic;">// 2、将 3 赋值给 count2</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#7F848E;font-style:italic;">// 2.1 将 int 型 3 推送至栈顶</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#D19A66;">10</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> iconst_3                         </span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#7F848E;font-style:italic;">// 2.2 为 count2 静态变量赋值</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#D19A66;">11</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> put</span><span style="color:#C678DD;">static</span><span style="color:#E06C75;">     #</span><span style="color:#D19A66;">3</span><span style="color:#E06C75;">                  </span><span style="color:#7F848E;font-style:italic;">// Field count2:I</span></span>
<span class="line"><span style="color:#E06C75;">      </span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#7F848E;font-style:italic;">// 3、结束方法</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#D19A66;">14</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">return</span><span style="color:#E06C75;">                            </span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>很显然了，count2 最后是被赋值为 3 了。</p><p>正确答案就是：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">count1=1</span></span>
<span class="line"><span style="color:#A6ACCD;">count2=3</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">count1=1</span></span>
<span class="line"><span style="color:#abb2bf;">count2=3</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><h2 id="额外扩展" tabindex="-1">额外扩展 <a class="header-anchor" href="#额外扩展" aria-hidden="true">#</a></h2><p>那如果真的想得到之前的结果呢？</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">count1=1</span></span>
<span class="line"><span style="color:#A6ACCD;">count2=4</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#abb2bf;">count1=1</span></span>
<span class="line"><span style="color:#abb2bf;">count2=4</span></span>
<span class="line"><span style="color:#abb2bf;"></span></span></code></pre></div><p>只需要将 count1、count2 两个静态变量的顺序调整到 Singleton 类的唯一对象（实例）变量上方就可以了。</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight has-highlighted-lines vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count1</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton</span><span style="color:#A6ACCD;"> singleton </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton</span><span style="color:#89DDFF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Singleton</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        count1</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">        count2</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> singleton</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Test</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Singleton</span><span style="color:#A6ACCD;"> singleTon </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Singleton</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">count1=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> singleTon</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">count2=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> singleTon</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro has-highlighted-lines vp-code-light" tabindex="0"><code><span class="line"><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count2 </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#D19A66;">3</span><span style="color:#ABB2BF;">;</span></span>
<span class="line highlighted"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#E06C75;"> singleton </span><span style="color:#56B6C2;">=</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;"> </span><span style="color:#61AFEF;">Singleton</span><span style="color:#E06C75;">()</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">private</span><span style="color:#61AFEF;"> Singleton</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        count1++;</span></span>
<span class="line"><span style="color:#ABB2BF;">        count2++;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#61AFEF;"> getInstance</span><span style="color:#ABB2BF;">()</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> singleton;</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">Test</span><span style="color:#E06C75;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">void</span><span style="color:#61AFEF;"> main</span><span style="color:#ABB2BF;">(</span><span style="color:#E5C07B;">String</span><span style="color:#ABB2BF;">[] </span><span style="color:#E06C75;font-style:italic;">args</span><span style="color:#ABB2BF;">)</span><span style="color:#61AFEF;"> </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;"> </span><span style="color:#E06C75;">singleTon</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">Singleton</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count1=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">singleTon</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count1</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">        </span><span style="color:#E5C07B;">System</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">out</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">println</span><span style="color:#ABB2BF;">(</span><span style="color:#98C379;">&quot;count2=&quot;</span><span style="color:#ABB2BF;"> </span><span style="color:#56B6C2;">+</span><span style="color:#ABB2BF;"> </span><span style="color:#E5C07B;">singleTon</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">count2</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">    }</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span></code></pre></div><p>我们再次通过 <code>javap -c Singleton.class</code> 反汇编一下字节码文件，反汇编后的 JVM 指令如下：</p><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C792EA;">Compiled</span><span style="color:#A6ACCD;"> from </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Test.java</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">org</span><span style="color:#A6ACCD;">.example.Singleton </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> count2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">example</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Singleton</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getInstance</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 获取 singleton 静态对象变量，并将其值压入栈顶</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> get</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;">     #</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Field singleton:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 从当前方法返回 singleton 对象引用</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> areturn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">    Code</span><span style="color:#89DDFF;font-style:italic;">:</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 1、将 3 赋值给 count2，count2 此时为 3</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 1.1 将 int 型 3 推送至栈顶</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> iconst_3</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 1.2 为 count2 静态变量赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> put</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;">     #</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Field count2:I</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 2、创建 Singleton 类的对象，并赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 2.1 创建对象</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;">           #5                  </span><span style="color:#676E95;font-style:italic;">// class org/example/Singleton</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 2.2 复制栈顶数值并将复制值压入栈顶</span></span>
<span class="line"><span style="color:#A6ACCD;">       7</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> dup</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#676E95;font-style:italic;">// 2.3 调用 Singleton 类构造方法，count1 和 count2 自增 1，count1 此时为 1，count2 此时为 4</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> invokespecial #</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 2.4 对象创建成功将对象引用赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">11</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> put</span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;">     #</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">                  </span><span style="color:#676E95;font-style:italic;">// Field singleTon:Lorg/example/Singleton;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 3、结束方法</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F78C6C;">14</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki one-dark-pro vp-code-light" tabindex="0"><code><span class="line"><span style="color:#E5C07B;">Compiled</span><span style="color:#E06C75;"> from </span><span style="color:#98C379;">&quot;Test.java&quot;</span></span>
<span class="line"><span style="color:#C678DD;">class</span><span style="color:#E06C75;"> </span><span style="color:#E5C07B;">org</span><span style="color:#E06C75;">.example.Singleton </span><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count1</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">int</span><span style="color:#E06C75;"> count2</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">public</span><span style="color:#61AFEF;"> </span><span style="color:#C678DD;">static</span><span style="color:#61AFEF;"> </span><span style="color:#E5C07B;">org</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">example</span><span style="color:#ABB2BF;">.</span><span style="color:#E5C07B;">Singleton</span><span style="color:#61AFEF;"> getInstance</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"><span style="color:#E06C75;">    Code</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 获取 singleton 静态对象变量，并将其值压入栈顶</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> get</span><span style="color:#C678DD;">static</span><span style="color:#E06C75;">     #</span><span style="color:#D19A66;">4</span><span style="color:#E06C75;">                  </span><span style="color:#7F848E;font-style:italic;">// Field singleton:Lorg/example/Singleton;</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 从当前方法返回 singleton 对象引用</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">3</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> areturn</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">  </span><span style="color:#C678DD;">static</span><span style="color:#E06C75;"> {}</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#E06C75;">    Code</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 1、将 3 赋值给 count2，count2 此时为 3</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 1.1 将 int 型 3 推送至栈顶</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">0</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> iconst_3</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 1.2 为 count2 静态变量赋值</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">1</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> put</span><span style="color:#C678DD;">static</span><span style="color:#E06C75;">     #</span><span style="color:#D19A66;">3</span><span style="color:#E06C75;">                  </span><span style="color:#7F848E;font-style:italic;">// Field count2:I</span></span>
<span class="line"><span style="color:#E06C75;">       </span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 2、创建 Singleton 类的对象，并赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 2.1 创建对象</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">4</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">new</span><span style="color:#E06C75;">           #5                  </span><span style="color:#7F848E;font-style:italic;">// class org/example/Singleton</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 2.2 复制栈顶数值并将复制值压入栈顶</span></span>
<span class="line"><span style="color:#E06C75;">       7</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> dup</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#7F848E;font-style:italic;">// 2.3 调用 Singleton 类构造方法，count1 和 count2 自增 1，count1 此时为 1，count2 此时为 4</span></span>
<span class="line"><span style="color:#E06C75;">       </span><span style="color:#D19A66;">8</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> invokespecial #</span><span style="color:#D19A66;">6</span><span style="color:#E06C75;">                  </span><span style="color:#7F848E;font-style:italic;">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#7F848E;font-style:italic;">// 2.4 对象创建成功将对象引用赋值给静态对象变量 singleton</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#D19A66;">11</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> put</span><span style="color:#C678DD;">static</span><span style="color:#E06C75;">     #</span><span style="color:#D19A66;">4</span><span style="color:#E06C75;">                  </span><span style="color:#7F848E;font-style:italic;">// Field singleTon:Lorg/example/Singleton;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#7F848E;font-style:italic;">// 3、结束方法</span></span>
<span class="line"><span style="color:#E06C75;">      </span><span style="color:#D19A66;">14</span><span style="color:#C678DD;">:</span><span style="color:#E06C75;"> </span><span style="color:#C678DD;">return</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>很显然了，count2 最后是被自增为 4 了。</p>`,27);function d(s,h,f,b,S,m){const o=e,t=A("ClientOnly");return p(),r("div",null,[u,y(t,null,{default:C(()=>{var n,a;return[(((n=s.$frontmatter)==null?void 0:n.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(p(),F(o,{key:0,article:s.$frontmatter},null,8,["article"])):E("",!0)]}),_:1}),g])}const k=c(B,[["render",d]]);export{x as __pageData,k as default};
